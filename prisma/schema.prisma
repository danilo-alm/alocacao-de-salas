generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma/client"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../src/generated/prisma/ERD.svg"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model tipo_sala {
  id            Int      @id @default(autoincrement())
  nome          String   @unique
  salas         sala[]
}

model bloco {
  id     Int      @id @default(autoincrement())
  nome   String   @unique
  salas  sala[]
}

model sala {
  id             Int               @id @default(autoincrement())
  codigo         String            @unique
  tipo_id        Int
  tipo           tipo_sala         @relation(fields: [tipo_id], references: [id])
  bloco_id       Int
  bloco          bloco             @relation(fields: [bloco_id], references: [id])
  capacidade     Int

  alocacoes      alocacao[]

  created_at     DateTime          @default(now()) @db.Timestamp(2)
  updated_at     DateTime          @updatedAt @db.Timestamp(2)

  @@index([tipo_id])
  @@index([bloco_id])
  @@index([capacidade])
}

model disciplina {
  id            Int         @id @default(autoincrement())
  nome          String      
  turma         String      @default("A")
  alocacoes     alocacao[]
  @@unique([nome, turma], name: "uq_disciplina_nome_turma")
}

model alocacao {
  id            Int         @id @default(autoincrement())
  data          DateTime?   @db.Date
  dia_da_semana Int         @db.TinyInt  // 0 (Domingo) a 6 (SÃ¡bado)
  hora_inicio   String
  hora_fim      String

  sala_id       Int
  sala          sala        @relation(fields: [sala_id], references: [id])

  disciplina_id Int
  disciplina    disciplina  @relation(fields: [disciplina_id], references: [id])

  created_at     DateTime   @default(now()) @db.Timestamp(2)
  updated_at     DateTime   @updatedAt @db.Timestamp(2)
  deleted_at     DateTime?  @db.Timestamp(2)

  @@index([disciplina_id])
  @@unique([sala_id, data, hora_inicio, hora_fim, deleted_at], name: "uq_alocacao_sala_data_horas") // Prevent double-booking
  // Overlapping prevention still needs to be handled in the application logic
}
